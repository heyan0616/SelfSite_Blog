{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{225:function(t,v,_){t.exports=_.p+\"assets/img/mqtheory-1.a7990f7f.jpg\"},226:function(t,v,_){t.exports=_.p+\"assets/img/mqtheory-2.751d8d0e.jpg\"},227:function(t,v,_){t.exports=_.p+\"assets/img/mqtheory-4.2aff3665.jpg\"},228:function(t,v,_){t.exports=_.p+\"assets/img/mqtheory-5.8f261411.jpg\"},229:function(t,v,_){t.exports=_.p+\"assets/img/mqtheory-6.14917a2c.jpg\"},230:function(t,v,_){t.exports=_.p+\"assets/img/mqtheory-7.52b735a2.jpg\"},231:function(t,v,_){t.exports=_.p+\"assets/img/mqtheory-3.725cef23.jpg\"},411:function(t,v,_){\"use strict\";_.r(v);var a=_(0),s=Object(a.a)({},(function(){var t=this,v=t.$createElement,a=t._self._c||v;return a(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":t.$parent.slotKey}},[a(\"h1\",{attrs:{id:\"消息队列相关知识\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#消息队列相关知识\"}},[t._v(\"#\")]),t._v(\" 消息队列相关知识\")]),t._v(\" \"),a(\"div\",{staticClass:\"custom-block tip\"},[a(\"p\",{staticClass:\"custom-block-title\"},[t._v(\"此文为转载 （通常一篇文章会参考多处，也会添加自己的理解，引用地址如有遗漏，请指出）\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"https://www.jianshu.com/p/4cca7c51eff0\")]),t._v(\" \"),a(\"li\",[t._v(\"https://segmentfault.com/a/1190000014958916\")]),t._v(\" \"),a(\"li\",[t._v(\"https://www.bbsmax.com/A/E35pGOgRJv/\")]),t._v(\" \"),a(\"li\",[t._v(\"http://www.uml.org.cn/itnews/2016050908.asp\")]),t._v(\" \"),a(\"li\",[t._v(\"https://www.infoq.cn/article/s*RvY8D1jrNIsfOJylPE\")]),t._v(\" \"),a(\"li\",[t._v(\"https://www.jianshu.com/p/ca8a823c26fa\")]),t._v(\" \"),a(\"li\",[t._v(\"https://blog.csdn.net/blackknightt/article/details/102847835\")]),t._v(\" \"),a(\"li\",[t._v(\"... ...\")])])]),t._v(\" \"),a(\"h2\",{attrs:{id:\"面向消息的中间件\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#面向消息的中间件\"}},[t._v(\"#\")]),t._v(\" 面向消息的中间件\")]),t._v(\" \"),a(\"p\",[t._v(\"消息队列中间件是分布式系统中重要的组件，主要解决应用耦合、异步消息、流量削锋等问题。实现高性能、高可用、可伸缩和最终一致性架构。是大型分布式系统不可缺少的中间件。\")]),t._v(\" \"),a(\"br\"),t._v(\" \"),a(\"h2\",{attrs:{id:\"应用场景\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#应用场景\"}},[t._v(\"#\")]),t._v(\" 应用场景\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"应用解耦\")]),t._v(\" \"),a(\"li\",[t._v(\"异步处理\")]),t._v(\" \"),a(\"li\",[t._v(\"削峰填谷（秒杀、大促等场景）\")]),t._v(\" \"),a(\"li\",[t._v(\"数据分发（广播）\")]),t._v(\" \"),a(\"li\",[t._v(\"分布式事务 \"),a(\"br\"),t._v(\"\\n...\")])]),t._v(\" \"),a(\"br\"),t._v(\" \"),a(\"h2\",{attrs:{id:\"消息中间件核心设计\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#消息中间件核心设计\"}},[t._v(\"#\")]),t._v(\" 消息中间件核心设计\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"本质\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#本质\"}},[t._v(\"#\")]),t._v(\" \"),a(\"strong\",[t._v(\"本质\")])]),t._v(\" \"),a(\"p\",[t._v(\"一种具备接收请求、保存数据、发送数据等功能的网络应用。和一般网络应用程序的区别是它主要负责数据的接收和传递，所以性能一般都高于普通程序\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"_5大核心组成\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_5大核心组成\"}},[t._v(\"#\")]),t._v(\" \"),a(\"strong\",[a(\"font\",{attrs:{color:\"orange\"}},[t._v(\"5大核心组成\")])],1)]),t._v(\" \"),a(\"ul\",[a(\"li\",[a(\"strong\",[t._v(\"协议\")])]),t._v(\" \"),a(\"li\",[a(\"strong\",[t._v(\"持久化机制\")])]),t._v(\" \"),a(\"li\",[a(\"strong\",[t._v(\"消息分发机制\")])]),t._v(\" \"),a(\"li\",[a(\"strong\",[t._v(\"高可用设计\")])]),t._v(\" \"),a(\"li\",[a(\"strong\",[t._v(\"高可靠设计\")])])]),t._v(\" \"),a(\"br\"),t._v(\" \"),a(\"h2\",{attrs:{id:\"异步消息传递技术\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#异步消息传递技术\"}},[t._v(\"#\")]),t._v(\" 异步消息传递技术\")]),t._v(\" \"),a(\"blockquote\",[a(\"p\",[t._v(\"帮助理解，此分类是否精确，有待商榷\")])]),t._v(\" \"),a(\"p\",[t._v(\"消息传递作为基本通信机制已经在全世界成功运用。无论是人与人、机器与人还是机器与机器之间，消息传递一直都是唯一常用的通信方式。在双方（或更多）之间交换消息有两种基本机制。\")]),t._v(\" \"),a(\"ol\",[a(\"li\",[t._v(\"同步消息传递\")]),t._v(\" \"),a(\"li\",[t._v(\"异步消息传递\")])]),t._v(\" \"),a(\"p\",[t._v(\"同步消息传递在这种情况下使用，当消息发送者希望在某个时间范围内收到响应，然后再进行下一个任务。基本上就是他在收到响应前一直处于“阻塞”状态。\"),a(\"br\"),t._v(\"\\n异步消息意味着发送者并不要求立即收到响应，而且也不会阻塞整个流程。响应可有可无，发送者总会执行剩下的任务。\\n上面提到的技术，当两台计算机上的程序相互通信的时候，就广泛使用了异步消息传递。随着微服务架构的兴起，很明显我们需要使用异步消息传递模型来构建服务。\\n这一直是软件工程中的基本问题，而且不同的人和组织机构会提出不同的方法。（\"),a(\"strong\",[t._v(\"JMS/AMQP/MQTT等\")]),t._v(\"就是几种广泛使用的异步消息传递技术）\")]),t._v(\" \"),a(\"br\"),t._v(\" \"),a(\"h2\",{attrs:{id:\"jms-java-message-service\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#jms-java-message-service\"}},[t._v(\"#\")]),t._v(\" JMS(Java Message Service)\")]),t._v(\" \"),a(\"p\",[t._v(\"JMS即Java消息服务（Java Message Service）应用程序接口，是一个Java平台中关于面向消息中间件（MOM）的API，用于在两个应用程序之间，或分布式系统中发送消息，进行异步通信。Java消息服务是一个与具体平台无关的API，绝大多数MOM提供商都对JMS提供支持。\")]),t._v(\" \"),a(\"p\",[t._v(\"JMS是最成功的异步消息传递技术之一。随着Java在许多大型企业应用中的使用，JMS就成为了企业系统的首选。它定义了构建消息传递系统的API。\")]),t._v(\" \"),a(\"p\",[t._v(\"下面是JMS的主要特性：\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"面向Java平台的标准消息传递API\")]),t._v(\" \"),a(\"li\",[t._v(\"在Java或JVM语言比如Scala、Groovy中具有互用性\")]),t._v(\" \"),a(\"li\",[t._v(\"无需担心底层协议\")]),t._v(\" \"),a(\"li\",[t._v(\"有queues和topics两种消息传递模型\")]),t._v(\" \"),a(\"li\",[t._v(\"支持事务\")]),t._v(\" \"),a(\"li\",[t._v(\"能够定义消息格式（消息头、属性和内容）\")])]),t._v(\" \"),a(\"blockquote\",[a(\"p\",[t._v(\"在JMS之前，大部分消息队列产品都支持点对点和发布/订阅两种方式传递消息。基于此，JMS将这两种消息模型抽象成两种规范，它们相互独立，由JMS的提供商（即消息队列产品的具体厂商）自己选择实现其中的一种还是两种模型。JMS的作用是提供通用的接口保证基于JMS API编写的程序适用于任何一种模型，使得在更换消息队列提供商的情况下应用程序相关代码不需要做太大的改动。\"),a(\"br\"),t._v(\" \"),a(\"br\"),t._v(\" \"),a(\"strong\",[t._v(\"传统企业型消息队列 ActiveMQ、IBM 的 MQSeries 等 就是基于 JMS 规范实现的。但其他流行的消息队列如RabbitMQ、Kafka等并没有遵循JMS规范。\")])])]),t._v(\" \"),a(\"h3\",{attrs:{id:\"jms两种消息模型\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#jms两种消息模型\"}},[t._v(\"#\")]),t._v(\" JMS两种消息模型\")]),t._v(\" \"),a(\"p\",[t._v(\"（1）点对点模型\")]),t._v(\" \"),a(\"p\",[t._v(\"在点对点模型中，应用程序由队列、发送者和接受者组成，每一条消息都被发送到特定的队列中，接受者从队列中获取相应的消息。\\n\")]),a(\"div\",{staticStyle:{display:\"flex\"}},[a(\"img\",{staticStyle:{zoom:\"60%\",display:\"block\"},attrs:{src:_(225),alt:\"\",aligh:\"left\"}})]),t._v(\"\\n特点：\"),a(\"p\"),t._v(\" \"),a(\"ol\",[a(\"li\",[t._v(\"每一条消息只有一个消费者，消息一旦被消费了就不在保留在消息队列中。\")]),t._v(\" \"),a(\"li\",[t._v(\"发送者和消费者之间在时间上没有依赖。\")]),t._v(\" \"),a(\"li\",[t._v(\"当接受者接受到消息后，会发送确认收到通知\")])]),t._v(\" \"),a(\"p\",[t._v(\"（2）发布订阅模型\")]),t._v(\" \"),a(\"p\",[t._v(\"在发布订阅模型中，应用程序由主题、发布者和订阅者组成。发布者发布每一条消息，该消息通过主题传递给所有的订阅者。\\n\")]),a(\"div\",{staticStyle:{display:\"flex\"}},[a(\"img\",{staticStyle:{zoom:\"60%\",display:\"block\"},attrs:{src:_(226),alt:\"\",aligh:\"left\"}})]),t._v(\"\\n特点：\"),a(\"p\"),t._v(\" \"),a(\"ol\",[a(\"li\",[t._v(\"每一条消息可以有多个订阅者\")]),t._v(\" \"),a(\"li\",[t._v(\"发布者和订阅者之间有时间上的依赖关系 (针对某个主题（Topic）的订阅者，它必须创建一个订阅者之后，才能消费发布者的消息。)\")]),t._v(\" \"),a(\"li\",[t._v(\"为了消费消息，订阅者必须保持运行的状态。（ \"),a(\"em\",[t._v(\"to be confirm:\")]),t._v(\" JMS允许创建一个可持久化的订阅，这样即使订阅者没有运行也能接收到所订阅的消息）\")]),t._v(\" \"),a(\"li\",[t._v(\"通常发布者不会知道也意识不到哪一个订阅者在接受消息\")])]),t._v(\" \"),a(\"h3\",{attrs:{id:\"jms消息消费\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#jms消息消费\"}},[t._v(\"#\")]),t._v(\" JMS消息消费\")]),t._v(\" \"),a(\"p\",[t._v(\"在JMS中，消息的产生和消费都是异步的。对于消费来说，JMS的消息者可以通过两种方式来消费消息。\")]),t._v(\" \"),a(\"ol\",[a(\"li\",[t._v(\"同步 - 订阅者或接收者通过receive方法来接收消息，receive方法在接收到消息之前（或超时之前）将一直阻塞；\")]),t._v(\" \"),a(\"li\",[t._v(\"异步 - 订阅者或接收者可以注册为一个消息监听器。当消息到达之后，系统自动调用监听器的onMessage方法。\")])]),t._v(\" \"),a(\"blockquote\",[a(\"p\",[t._v(\"JNDI：Java命名和目录接口,是一种标准的Java命名系统接口。可以在网络上查找和访问服务。通过指定一个资源名称，该名称对应于数据库或命名服务中的一个记录，同时返回资源连接建立所必须的信息。\"),a(\"br\"),t._v(\"\\nJNDI在JMS中起到查找和访问发送目标或消息来源的作用。\")])]),t._v(\" \"),a(\"br\"),t._v(\" \"),a(\"h2\",{attrs:{id:\"消息协议\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#消息协议\"}},[t._v(\"#\")]),t._v(\" 消息协议\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"协议是什么\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#协议是什么\"}},[t._v(\"#\")]),t._v(\" 协议是什么\")]),t._v(\" \"),a(\"p\",[t._v(\"协议是计算机之间通信时共同遵从的一组约定，都遵守相同的约定，计算机之间才能相互交流。 是对数据格式和计算机之间交换数据时必须遵守的规则的正式描述。\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"协议三要素\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#协议三要素\"}},[t._v(\"#\")]),t._v(\" 协议三要素\")]),t._v(\" \"),a(\"ol\",[a(\"li\",[t._v(\"语法：即数据与控制信息的结构或格式；\")]),t._v(\" \"),a(\"li\",[t._v(\"语义：即需要发出何种控制信息，完成何种动作以及做出何种响应；\")]),t._v(\" \"),a(\"li\",[t._v(\"时序（同步）：即事件实现顺序的详细说明。\")])]),t._v(\" \"),a(\"blockquote\",[a(\"p\",[t._v(\"Http协议三要素举例：\\n语法：http规定了请求报文和响应报文的具体格式\\n语义：客户端主动发起的操作称为请求；\\n时序：一个请求对应一个响应。\")])]),t._v(\" \"),a(\"h3\",{attrs:{id:\"消息协议-2\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#消息协议-2\"}},[t._v(\"#\")]),t._v(\" \"),a(\"strong\",[t._v(\"消息协议\")])]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"消息协议\")]),t._v(\"是指用于实现消息队列功能时候所涉及的协议。消息协议可分为开放协议和私有协议，常见的开放协议有OpenWire、AMQP、MQTT、STOMP、XMPP等。但是并不是MQ框架一定需要实现以上的协议，有的特殊框架（比如Kafka\"),a(\"code\",[t._v(\"(kafka)\")]),t._v(\"、Redis、ZeroMQ、RocketMQ\"),a(\"code\",[t._v(\"(OpenMessage)\")]),t._v(\"）自己基于TCP封装了一套协议，实现了MQ的功能。\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"为什么消息中间件不直接使用http协议\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#为什么消息中间件不直接使用http协议\"}},[t._v(\"#\")]),t._v(\" \"),a(\"strong\",[t._v(\"为什么消息中间件不直接使用Http协议?\")])]),t._v(\" \"),a(\"ol\",[a(\"li\",[t._v(\"http需要的内容太多，太复杂\")]),t._v(\" \"),a(\"li\",[t._v(\"http大部分情况都是短连接，请求响应之后就会中断，而消息中间件会长期的连接\")])]),t._v(\" \"),a(\"h3\",{attrs:{id:\"主要的协议介绍\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#主要的协议介绍\"}},[t._v(\"#\")]),t._v(\" 主要的协议介绍\")]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"高级消息队列协议（Advanced Message Queueing Protocol (AMQP)）\")])]),t._v(\" \"),a(\"p\",[t._v(\"JMS非常棒而且人们也非常乐意使用它。微软开发了NMS（.NET消息传递服务）来支持他们的平台和编程语言，它效果还不错。但是碰到了互用性的问题。两套使用两种不同编程语言的程序如何通过它们的异步消息传递机制相互通信呢。此时就需要定义一个异步消息传递的通用标准。JMS或者NMS都没有标准的底层协议。它们可以在任何底层协议上运行，但是API是与编程语言绑定的。AMQP解决了这个问题，它使用了一套标准的底层协议，加入了许多其他特征来支持互用性，为现代应用丰富了消息传递需求。\")]),t._v(\" \"),a(\"div\",{staticStyle:{display:\"flex\"}},[a(\"img\",{staticStyle:{zoom:\"40%\",display:\"block\"},attrs:{src:_(227),alt:\"\",aligh:\"left\"}})]),t._v(\" \"),a(\"br\"),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"消息队列遥测传输（Message Queueing Telemetry Transport (MQTT)）\")])]),t._v(\" \"),a(\"p\",[t._v(\"现在我们已经有了面向基于Java的企业应用的JMS和面向所有其他应用需求的AMQP。为什么我们还需要第三种技术？它是专门为小设备设计的。计算性能不高的设备不能适应AMQP上的复杂操作，它们需要一种简单而且可互用的方式进行通信。这是MQTT的基本要求，而如今，MQTT是物联网（IOT）生态系统中主要成分之一。\")]),t._v(\" \"),a(\"div\",{staticStyle:{display:\"flex\"}},[a(\"img\",{staticStyle:{zoom:\"40%\",display:\"block\"},attrs:{src:_(228),alt:\"\",aligh:\"left\"}})]),t._v(\" \"),a(\"br\"),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"kafka协议\")])]),t._v(\" \"),a(\"br\"),t._v(\" \"),a(\"div\",{staticStyle:{display:\"flex\"}},[a(\"img\",{staticStyle:{zoom:\"40%\",display:\"block\"},attrs:{src:_(229),alt:\"\",aligh:\"left\"}})]),t._v(\" \"),a(\"br\"),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"OpenMessage协议\")])]),t._v(\" \"),a(\"br\"),t._v(\" \"),a(\"div\",{staticStyle:{display:\"flex\"}},[a(\"img\",{staticStyle:{zoom:\"40%\",display:\"block\"},attrs:{src:_(230),alt:\"\",aligh:\"left\"}})]),t._v(\" \"),a(\"br\"),t._v(\" \"),a(\"h2\",{attrs:{id:\"持久化\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#持久化\"}},[t._v(\"#\")]),t._v(\" 持久化\")]),t._v(\" \"),a(\"p\",[t._v(\"简单来说持久化就是将数据存入磁盘，而不是存在内存中随服务重启而消失，使数据能够永久保存叫做持久化。下面是几款产品的简单比较：\")]),t._v(\" \"),a(\"table\",[a(\"thead\",[a(\"tr\",[a(\"th\",[t._v(\"ActiveMQ\")]),t._v(\" \"),a(\"th\",[t._v(\"RabbitMQ\")]),t._v(\" \"),a(\"th\",[t._v(\"Kafka\")]),t._v(\" \"),a(\"th\",[t._v(\"RocketMQ\")]),t._v(\" \"),a(\"th\")])]),t._v(\" \"),a(\"tbody\",[a(\"tr\",[a(\"td\",[t._v(\"文件系统\")]),t._v(\" \"),a(\"td\",[t._v(\"支持\")]),t._v(\" \"),a(\"td\",[t._v(\"支持\")]),t._v(\" \"),a(\"td\",[t._v(\"支持\")]),t._v(\" \"),a(\"td\",[t._v(\"支持\")])]),t._v(\" \"),a(\"tr\",[a(\"td\",[t._v(\"数据库\")]),t._v(\" \"),a(\"td\",[t._v(\"支持\")]),t._v(\" \"),a(\"td\",[t._v(\"/\")]),t._v(\" \"),a(\"td\",[t._v(\"/\")]),t._v(\" \"),a(\"td\",[t._v(\"/\")])])])]),t._v(\" \"),a(\"br\"),t._v(\" \"),a(\"h2\",{attrs:{id:\"分发策略（pull-push）\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#分发策略（pull-push）\"}},[t._v(\"#\")]),t._v(\" 分发策略（Pull/Push）\")]),t._v(\" \"),a(\"p\",[t._v(\"在消费中，一般有推消息和拉消息两种模式。推模式即服务端收到消息后，主动将消息推送给消费者，由消费者进行处理，这种模式具有更高的实时性，但是由于服务端不能准确评估消费端的消费性能，所以有可能造成消息推送过多使客户端来不及处理收到的消息； 拉模式则是服务端收到消息后将消息保存在服务端，被动的等待客户端来拉取消息，这种模式下客户端可以根据自己的处理能力来决定拉消息的频率，但是缺点就是消息处理可能有延迟，不过可以通过长轮询的方式来提高实时性。\")]),t._v(\" \"),a(\"p\",[t._v(\"产品比较：\")]),t._v(\" \"),a(\"table\",[a(\"thead\",[a(\"tr\",[a(\"th\",[t._v(\"ActiveMQ\")]),t._v(\" \"),a(\"th\",[t._v(\"RabbitMQ\")]),t._v(\" \"),a(\"th\",[t._v(\"Kafka\")]),t._v(\" \"),a(\"th\",[t._v(\"RocketMQ\")]),t._v(\" \"),a(\"th\")])]),t._v(\" \"),a(\"tbody\",[a(\"tr\",[a(\"td\",[t._v(\"发布订阅\")]),t._v(\" \"),a(\"td\",[t._v(\"支持\")]),t._v(\" \"),a(\"td\",[t._v(\"支持\")]),t._v(\" \"),a(\"td\",[t._v(\"支持\")]),t._v(\" \"),a(\"td\",[t._v(\"支持\")])]),t._v(\" \"),a(\"tr\",[a(\"td\",[t._v(\"轮询分发\")]),t._v(\" \"),a(\"td\",[t._v(\"支持\")]),t._v(\" \"),a(\"td\",[t._v(\"支持\")]),t._v(\" \"),a(\"td\",[t._v(\"支持\")]),t._v(\" \"),a(\"td\",[t._v(\"/\")])]),t._v(\" \"),a(\"tr\",[a(\"td\",[t._v(\"公平分发\")]),t._v(\" \"),a(\"td\",[t._v(\"/\")]),t._v(\" \"),a(\"td\",[t._v(\"支持\")]),t._v(\" \"),a(\"td\",[t._v(\"支持\")]),t._v(\" \"),a(\"td\",[t._v(\"/\")])]),t._v(\" \"),a(\"tr\",[a(\"td\",[t._v(\"重发\")]),t._v(\" \"),a(\"td\",[t._v(\"支持\")]),t._v(\" \"),a(\"td\",[t._v(\"支持\")]),t._v(\" \"),a(\"td\",[t._v(\"/\")]),t._v(\" \"),a(\"td\",[t._v(\"支持\")])]),t._v(\" \"),a(\"tr\",[a(\"td\",[t._v(\"消息拉取\")]),t._v(\" \"),a(\"td\",[t._v(\"/\")]),t._v(\" \"),a(\"td\",[t._v(\"支持\")]),t._v(\" \"),a(\"td\",[t._v(\"支持\")]),t._v(\" \"),a(\"td\",[t._v(\"支持\")])])])]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"发布订阅：可以指定某个队列或者某个topic主题去接收消息，mq标配功能\")]),t._v(\" \"),a(\"li\",[t._v(\"重发：kafka是不支持重发的，因为kafka是consumer拉取消息\")]),t._v(\" \"),a(\"li\",[t._v(\"公平分发：公平分发也就是能者多劳模式，当有消费者处理完成后，MQ就会继续给它分发消息，直到MQ中所有消息都被消费。\")])]),t._v(\" \"),a(\"br\"),t._v(\" \"),a(\"h2\",{attrs:{id:\"投递策略（delivery-policies）\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#投递策略（delivery-policies）\"}},[t._v(\"#\")]),t._v(\" 投递策略（Delivery policies）\")]),t._v(\" \"),a(\"p\",[t._v(\"消息传递过程中，会有各种异常导致消息不能正常发送，这时候，我们有以下三种选择：\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[a(\"strong\",[t._v(\"At most once\")]),t._v(\" - 下游允许部分消息丢失，不进行处理，这种方式一般适用于监控信息和 log 的传递，少一两条影响不大，称为至多一次（Qos=0）\")]),t._v(\" \"),a(\"li\",[a(\"strong\",[t._v(\"At least once\")]),t._v(\" - 还有一种是消息必须全部送达，不允许任何消息丢失，但是可以接受部分消息重复，这种我们称为至少一次（Qos=1），此种方式一般适用于订单，支付等场景（当然，这要求下游系统实现去重或幂等）\")]),t._v(\" \"),a(\"li\",[a(\"strong\",[t._v(\"Exactly once\")]),t._v(\" - 还有一种最严格的要求，就是消息只能送达一次，不能多也不能少，这种我们称为正好一次（Qos=2）\")])]),t._v(\" \"),a(\"br\"),t._v(\" \"),a(\"h2\",{attrs:{id:\"高可用设计\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#高可用设计\"}},[t._v(\"#\")]),t._v(\" 高可用设计\")]),t._v(\" \"),a(\"p\",[t._v(\"具体讲解\")]),t._v(\" \"),a(\"br\"),t._v(\" \"),a(\"h2\",{attrs:{id:\"高可靠设计\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#高可靠设计\"}},[t._v(\"#\")]),t._v(\" 高可靠设计\")]),t._v(\" \"),a(\"p\",[t._v(\"具体讲解\")]),t._v(\" \"),a(\"br\"),t._v(\" \"),a(\"h2\",{attrs:{id:\"常见的消息队列总结比较\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#常见的消息队列总结比较\"}},[t._v(\"#\")]),t._v(\" 常见的消息队列总结比较\")]),t._v(\" \"),a(\"p\",[t._v(\"当前使用较多的消息队列有RabbitMQ、ActiveMQ、RocketMQ、Kafka等等，redis数据库也可以实现消息队列，不过不推荐，redis本身设计就不是用来做消息队列的。\")]),t._v(\" \"),a(\"div\",{staticStyle:{display:\"flex\"}},[a(\"img\",{staticStyle:{zoom:\"100%\",display:\"block\"},attrs:{src:_(231),alt:\"\",aligh:\"left\"}})])])}),[],!1,null,null,null);v.default=s.exports}}]);","extractedComments":[]}