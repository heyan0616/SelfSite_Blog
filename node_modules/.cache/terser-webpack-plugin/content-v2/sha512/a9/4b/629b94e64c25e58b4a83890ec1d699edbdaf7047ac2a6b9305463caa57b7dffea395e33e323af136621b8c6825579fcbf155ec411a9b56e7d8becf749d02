{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{374:function(t,a,s){t.exports=s.p+\"assets/img/nio-overview-1.9e0ae45f.jpg\"},375:function(t,a,s){t.exports=s.p+\"assets/img/nio-overview-2.bfbc4491.jpg\"},376:function(t,a,s){t.exports=s.p+\"assets/img/nio-overview-3.41f0b947.jpg\"},377:function(t,a,s){t.exports=s.p+\"assets/img/nio-overview-4.3c8ee878.jpg\"},378:function(t,a,s){t.exports=s.p+\"assets/img/nio-overview-5.7564f3b0.jpg\"},379:function(t,a,s){t.exports=s.p+\"assets/img/nio-overview-6.46b0b934.jpg\"},380:function(t,a,s){t.exports=s.p+\"assets/img/nio-overview-7.27bbcf12.jpg\"},504:function(t,a,s){\"use strict\";s.r(a);var i=s(0),v=Object(i.a)({},(function(){var t=this,a=t.$createElement,i=t._self._c||a;return i(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":t.$parent.slotKey}},[i(\"h1\",{attrs:{id:\"javanio-概述\"}},[i(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#javanio-概述\"}},[t._v(\"#\")]),t._v(\" JavaNIO - 概述\")]),t._v(\" \"),i(\"div\",{staticClass:\"custom-block tip\"},[i(\"p\",{staticClass:\"custom-block-title\"},[t._v(\"此文为转载 （通常一篇文章会参考多处，也会添加自己的理解，引用地址如有遗漏，请指出）\")]),t._v(\" \"),i(\"ul\",[i(\"li\",[t._v(\"引用多出，具体出处想不起来了，如发现，请告知!\")])])]),t._v(\" \"),i(\"br\"),t._v(\" \"),i(\"p\",[t._v(\"这里只是综合介绍NIO以及和传统IO的一些比较，至于更多的比较，如两者的关系、在实际使用中该如何选择等，会在后续讲完NIO之后再进一步阐述。\")]),t._v(\" \"),i(\"h2\",{attrs:{id:\"储备知识：java-io\"}},[i(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#储备知识：java-io\"}},[t._v(\"#\")]),t._v(\" 储备知识：Java IO\")]),t._v(\" \"),i(\"div\",{staticStyle:{display:\"flex\"}},[i(\"img\",{staticStyle:{zoom:\"80%\",display:\"block\"},attrs:{src:s(374),alt:\"\",align:\"left\"}})]),t._v(\" \"),i(\"h2\",{attrs:{id:\"对比于-java-io，nio具备的新特性如下\"}},[i(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#对比于-java-io，nio具备的新特性如下\"}},[t._v(\"#\")]),t._v(\" 对比于 Java IO，NIO具备的新特性如下:\")]),t._v(\" \"),i(\"div\",{staticStyle:{display:\"flex\"}},[i(\"img\",{staticStyle:{zoom:\"80%\",display:\"block\"},attrs:{src:s(375),alt:\"\",align:\"left\"}})]),t._v(\" \"),i(\"br\"),t._v(\" \"),i(\"h2\",{attrs:{id:\"核心组件\"}},[i(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#核心组件\"}},[t._v(\"#\")]),t._v(\" 核心组件\")]),t._v(\" \"),i(\"p\",[t._v(\"Java NIO的核心组件 包括：\")]),t._v(\" \"),i(\"ul\",[i(\"li\",[t._v(\"通道（Channel）\")]),t._v(\" \"),i(\"li\",[t._v(\"缓冲区（Buffer）\")]),t._v(\" \"),i(\"li\",[t._v(\"选择器（Selectors）\")])]),t._v(\" \"),i(\"div\",{staticStyle:{display:\"flex\"}},[i(\"img\",{staticStyle:{zoom:\"80%\",display:\"block\"},attrs:{src:s(376),alt:\"\",align:\"left\"}})]),t._v(\" \"),i(\"br\"),t._v(\" \"),i(\"h2\",{attrs:{id:\"与java-io的区别\"}},[i(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#与java-io的区别\"}},[t._v(\"#\")]),t._v(\" 与Java IO的区别\")]),t._v(\" \"),i(\"div\",{staticStyle:{display:\"flex\"}},[i(\"img\",{staticStyle:{zoom:\"80%\",display:\"block\"},attrs:{src:s(377),alt:\"\",align:\"left\"}})]),t._v(\" \"),i(\"h3\",{attrs:{id:\"面向流\"}},[i(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#面向流\"}},[t._v(\"#\")]),t._v(\" 面向流\")]),t._v(\" \"),i(\"p\",[t._v(\"Java IO是面向流的I/O，这意味着我们需要从流中读取一个或多个字节。它使用流来在数据源/槽和java程序之间传输数据。使用此方法的I/O操作较慢。\")]),t._v(\" \"),i(\"p\",[t._v(\"下面来看看在Java程序中使用输入/输出流的数据流图(注意：图中输入|输出均以Java Program为参照物)：\")]),t._v(\" \"),i(\"div\",{staticStyle:{display:\"flex\"}},[i(\"img\",{staticStyle:{zoom:\"80%\",display:\"block\"},attrs:{src:s(378),alt:\"\",align:\"left\"}})]),t._v(\" \"),i(\"br\"),t._v(\" \"),i(\"h3\",{attrs:{id:\"面向缓冲\"}},[i(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#面向缓冲\"}},[t._v(\"#\")]),t._v(\" 面向缓冲\")]),t._v(\" \"),i(\"p\",[t._v(\"Java NIO是面向缓存的I/O方法。 将数据读入缓冲器，再使用通道进一步处理数据。 在NIO中，使用通道和缓冲区来处理I/O操作。\"),i(\"br\"),t._v(\"通道和流之间的主要区别是：\"),i(\"br\"),t._v(\"\\t- 流可以用于单向数据传输。\"),i(\"br\"),t._v(\"\\t- 通道提供双向数据传输。\"),i(\"br\"),t._v(\"因此，通过在java NIO中引入通道，可以执行非阻塞I/O操作。\")]),t._v(\" \"),i(\"p\",[t._v(\"如下图所示：通道，缓冲区，java程序，数据源和数据接收器之间的相互作用 。\")]),t._v(\" \"),i(\"div\",{staticStyle:{display:\"flex\"}},[i(\"img\",{staticStyle:{zoom:\"80%\",display:\"block\"},attrs:{src:s(379),alt:\"\",align:\"left\"}})]),t._v(\" \"),i(\"br\"),t._v(\" \"),i(\"h3\",{attrs:{id:\"延伸：nio-与-io-区别\"}},[i(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#延伸：nio-与-io-区别\"}},[t._v(\"#\")]),t._v(\" 延伸：NIO 与 IO 区别\")]),t._v(\" \"),i(\"p\",[i(\"strong\",[t._v(\"面向流和面向缓冲区\")]),t._v(\"：一个有趣的比喻（引自某个视频）：\")]),t._v(\" \"),i(\"ul\",[i(\"li\",[t._v(\"IO 面向流：直接面向数据流动，且是单向的（输入输出相互独立）\")]),t._v(\" \"),i(\"li\",[t._v(\"NIO 面向缓冲：可以理解\"),i(\"strong\",[t._v(\"通道\")]),t._v(\"为铁路（本身没有数据，只负责连接源和目的地）；\"),i(\"strong\",[t._v(\"缓冲区\")]),t._v(\"类似火车，可以存储数据、卸载数据。显然它是双向的。\")])]),t._v(\" \"),i(\"p\",[i(\"strong\",[t._v(\"关于其他两个区别，主要是针对网络编程\")]),t._v(\"，查看后续章节\")]),t._v(\" \"),i(\"div\",{staticStyle:{display:\"flex\"}},[i(\"img\",{staticStyle:{zoom:\"50%\",display:\"block\"},attrs:{src:s(380),alt:\"\",align:\"left\"}})])])}),[],!1,null,null,null);a.default=v.exports}}]);","extractedComments":[]}